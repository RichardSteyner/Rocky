global class AdvancedMDPostPatientsBatch implements Database.Batchable<sObject>, Database.Stateful, Database.AllowsCallouts{
    public String org;
    
    global AdvancedMDPostPatientsBatch(String org){
        this.org = org;
    }
    
    global Database.QueryLocator start(Database.BatchableContext BC){
        System.debug('Start Post');
        String primaryClinic = String.isNotBlank(org) ? (!org.equalsIgnoreCase('AMC') ? (!org.equalsIgnoreCase('BRMC') ? (!org.equalsIgnoreCase('CMC') ? (!org.equalsIgnoreCase('TMC') ? (!org.equalsIgnoreCase('NMC') ? (!org.equalsIgnoreCase('RMMC') ? (!org.equalsIgnoreCase('Production') ? 'Colorado Springs' : 'Rocky Mountain Mens Clinic') : 'Rocky Mountain Mens Clinic') : 'Northeast Mens Clinic') : 'Tennessee Mens Clinic') : 'Columbus Mens Clinic') : 'Baton Rouge Mens Clinic') : 'Alabama Mens Clinic')  : '' ;
        String auxFilter = String.isNotBlank(org) ? org.equalsIgnoreCase('RMMC') ? ' or Primary_Clinic__c=\'Colorado Springs\' or Primary_Clinic__c=\'Central Denver\' or Primary_Clinic__c=\'North Denver\' or Primary_Clinic__c=\'Castle Rock\') ' : org.equalsIgnoreCase('NMC') ? ' or Primary_Clinic__c=\'Northeast Mens Clinic - Dedham\' ) ' : ') ' : ') ';
        return Database.getQueryLocator('Select Id, AdvancedMDID__c, Responsible_Party_Id__c, Provider__r.Profile_Id__c, Responsible_Party__r.AdvancedMD_Resp_Party_ID__c, FirstName, MiddleName, LastName, PersonBirthdate, As_of_Date__c, Sex__c, SSN__c, GI__c, SO__c, Chart_Number__c, Marital_Status__c, Employer__c, PersonTitle, Relationship__c, Preferred_Language__c, Race__c, Ethnicity__c, Additional_MRN__c, PersonEmail, BillingStreet, BillingPostalCode, BillingCity, BillingState, BillingCountry, PersonHomePhone, Work_Phone__c, PersonMobilePhone, Fax, PersonOtherphone, Phone, Confidential__c, Description From Account Where AdvancedMD_To_Sync__c = true and (Primary_Clinic__c=\''+ primaryClinic+'\''+ auxFilter + ' limit 12');
    }
    global void execute(Database.BatchableContext BC, List<Account> scope){
        System.debug('Execute Post');
        HTTPResponse response;
        String xmlBody;
        Map<String, Account> respPartyAccountsMap = new Map<String, Account>();
        for(Account account:scope){
            if(String.isBlank(account.AdvancedMDID__c)){
                xmlBody = '<ppmdmsg action="addpatient" class="demographics" force="1">'
                            	+'<patientlist>'
                            		+'<patient name="' + account.LastName + (String.isNotBlank(account.FirstName) ? ',' + account.FirstName : '') + (String.isNotBlank(account.MiddleName) ? ' ' + account.MiddleName : '') + '" profile="'+ (String.isNotBlank(account.Provider__r.Profile_Id__c) ? account.Provider__r.Profile_Id__c : '') + '"'+ /*(String.isNotBlank(account.Responsible_Party__r.AdvancedMD_Resp_Party_ID__c) ? ' respparty="' + ApexUtil.getAMDID(account.Responsible_Party__r.AdvancedMD_Resp_Party_ID__c, org) + '"' : '') +*/ ' dob="' + (account.PersonBirthdate != null ? account.PersonBirthdate.format() : '') + '" deceased="' + (account.As_of_Date__c != null ? account.As_of_Date__c.format() : '') + '" inactivestatus="' + (account.As_of_Date__c != null ? '6' : '') + '" sex="' + (account.Sex__c == 'Male' ? 'M' : account.Sex__c == 'Female' ? 'F' : account.Sex__c == 'Unknown' ? 'U' : '') + '" ssn="' + (String.isNotBlank(account.SSN__c) ? account.SSN__c : '') + '" genderidentity="' + (account.GI__c == 'Male' ? '558' : account.GI__c == 'Female' ? '559' : account.GI__c == 'Transgender Male / Trans Man / Female-to-Male' ? '560' : account.GI__c == 'Transgender Female / Trans Wormen / Male-to-Female' ? '561' : account.GI__c == 'Genderqueer, Neither exclusively male nor female' ? '562' : account.GI__c == 'Decline to answer' ? '564' : '') + '" orientation="' + (account.SO__c == 'Straight / Heterosexual' ? '565' : account.SO__c == 'Lesbian / Gay / Homosexual' ? '566' : account.SO__c == 'Bisexual' ? '567' : account.SO__c == 'Something else' ? '568' : account.SO__c == 'Don\'t know' ? '569' : account.SO__c == 'Decline to answer' ? '570' : '') + '" chart="' + (String.isNotBlank(account.Chart_Number__c) ? account.Chart_Number__c : '') + '" maritalstatus="' + (String.isNotBlank(account.Marital_Status__c) ? (account.Marital_Status__c == 'Single' ? '1' : account.Marital_Status__c == 'Married' ? '2' : account.Marital_Status__c == 'Divorced' ? '3' : account.Marital_Status__c == 'Legally Separated' ? '4' : account.Marital_Status__c == 'Widowed' ? '5' : account.Marital_Status__c == 'Unknown' ? '6' : account.Marital_Status__c) : '') + '" employer="' + (account.Employer__c != null ? account.Employer__c : '') + '" title="' + (String.isNotBlank(account.PersonTitle) ? account.PersonTitle : '') + '" hipaarelationship="' + (String.isNotBlank(account.Relationship__c) ? (account.Relationship__c == '18-Self' ? '18' : account.Relationship__c == '01-Spouse' ? '01' : account.Relationship__c == '04-Grandfather or Grandmother' ? '04' : account.Relationship__c == '05-Grandson or Granddaughter' ? '05' : account.Relationship__c == '07-Nephew or Niece' ? '07' : account.Relationship__c == '09-Adopted Child' ? '09' : account.Relationship__c == '10-Foster Child' ? '10' : account.Relationship__c == '15-Ward' ? '15' : account.Relationship__c == '17-Stepson or Stepdaughter' ? '17' : account.Relationship__c == '19-Child' ? '19' : account.Relationship__c == '20-Employee' ? '20' : account.Relationship__c == '21-Unknown' ? '21' : account.Relationship__c == '22-Handicapped Dependent' ? '22' : account.Relationship__c == '23-Sponsored Dependent' ? '23' : account.Relationship__c == '24-Dependent of a Minor Dependent' ? '24' : account.Relationship__c == '29-Significant Other' ? '29' : account.Relationship__c == '32-Mother' ? '32' : account.Relationship__c == '33-Father' ? '33' : account.Relationship__c == '34-Other Adult' ? '34' : account.Relationship__c == '36-Emancipated Minor' ? '36' : account.Relationship__c == '39-Organ Donor' ? '39' : account.Relationship__c == '40-Cadaver Donor' ? '40' : account.Relationship__c == '41-Injured Plaintiff' ? '41' : account.Relationship__c == '43-Child Where Insured Has No Financial Responsibility' ? '43' : account.Relationship__c == '53-Life Partner' ? '53' : account.Relationship__c == 'G8-Other Relationship' ? 'G8' : account.Relationship__c) : '') + '" languageid="' + (String.isNotEmpty(account.Preferred_Language__c) ? account.Preferred_Language__c : '') + '" races="' + (String.isNotEmpty(account.Race__c) ? account.Race__c : '') + '" ethnicityid="' + (String.isNotEmpty(account.Ethnicity__c) ? account.Ethnicity__c : '') + '" additionalmrn="' + (String.isNotEmpty(account.Additional_MRN__c) ? account.Additional_MRN__c : '') + '">'
                            			+'<address address1="' + (String.isNotBlank(account.BillingStreet) ? account.BillingStreet.substringBefore(',') : '') + '" address2="' + (String.isNotBlank(account.BillingStreet) ? account.BillingStreet.substringAfter(',') : '') + '" zip="' + (String.isNotBlank(account.BillingPostalCode) ? account.BillingPostalCode : '') + '" city="' + (String.isNotBlank(account.BillingCity) ? account.BillingCity : '') + '" state="' + (String.isNotBlank(account.BillingState) ? account.BillingState : '') + '" countrycode="' + (String.isNotBlank(account.BillingCountry) ? account.BillingCountry : '') + '"/>'
                            			+'<contactinfo email="' + (String.isNotBlank(account.PersonEmail) ? account.PersonEmail : '') + '" homephone="' + (String.isNotBlank(account.PersonHomePhone) ? account.PersonHomePhone : '') + '" officephone="' + (String.isNotBlank(account.Work_Phone__c) ? account.Work_Phone__c.replaceAll('\\D', '').left(10) : '') + '" officeext="' + (String.isNotBlank(account.Work_Phone__c) ? account.Work_Phone__c.replaceAll('\\D', '').left(10) : '') + '" othertype="' + (String.isNotBlank(account.PersonOtherphone) ? 'O' : String.isNotBlank(account.PersonMobilePhone) ? 'C' : String.isNotBlank(account.Fax) ? 'F' : '') + '" otherphone="' + (String.isNotBlank(account.PersonOtherphone) ? account.PersonOtherphone : String.isNotBlank(account.PersonMobilePhone) ? account.PersonMobilePhone : String.isNotBlank(account.Fax) ? account.Fax : '') + '" preferredcommunicationfid="' + (String.isNotBlank(account.Phone) ? (account.Phone == account.PersonHomePhone ? '1' : account.Phone == account.Work_Phone__c ? '2' : account.Phone == account.PersonOtherphone ? '3' : '') : '') + '" confidentialcommunicationfid="' + (String.isNotBlank(account.Confidential__c) ? (account.Confidential__c == 'Home Phone' ? '1' : account.Confidential__c == 'Work Phone' ? '2' : account.Confidential__c == 'Email' ? '4' : account.Confidential__c == 'Letter' ? '5' : account.Confidential__c == 'Other' ? '6' : account.Confidential__c == 'Patient Portal' ? '7' : account.Confidential__c == 'Fax' || account.Confidential__c == 'Cell' || account.Confidential__c == 'Other Phone' ? '3' : '') : '') + '" communicationnote="' + (String.isNotBlank(account.Description) ? account.Description : '') + '"/>'
                            		+'</patient>'
                            	+'</patientlist>'
                            +'</ppmdmsg>';
                response = AdvancedMDConnector.postAdvancedMDObject(org, xmlBody);
                if(response.getStatusCode() == 200 && response.getBody().contains('success="1"')){
                    account.AdvancedMDID__c = String.isNotBlank(response.getBody().substringBetween('<patient id="','"')) ? org.touppercase() + '-' + response.getBody().substringBetween('<patient id="','"').substringAfter('pat') : '';
                    //account.Responsible_Party_Id__c = String.isNotBlank(response.getBody().substringBetween('<respparty id="','"')) ? org.touppercase() + '-' + response.getBody().substringBetween('<respparty id="','"').substringAfter('resp') : '';
                    //if(String.isBlank(account.Responsible_Party__r.AdvancedMD_Resp_Party_ID__c) && String.isNotBlank(account.Responsible_Party_Id__c)) respPartyAccountsMap.put(account.Responsible_Party_Id__c, new Account(RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Responsible Party') != null ? Schema.SObjectType.Account.getRecordTypeInfosByName().get('Responsible Party').getRecordTypeId() : null, AdvancedMD_Resp_Party_ID__c = account.Responsible_Party_Id__c, FirstName = account.FirstName, LastName = account.LastName, PersonTitle = account.PersonTitle, BillingStreet = account.BillingStreet, BillingCity = account.BillingCity, BillingState = account.BillingState, BillingPostalCode = account.BillingPostalCode, Phone = account.Phone, PersonHomePhone = account.PersonHomePhone, Work_Phone__c = account.Work_Phone__c, PersonMobilePhone = account.PersonMobilePhone, Fax = account.Fax, PersonOtherphone = account.PersonOtherphone, PersonEmail = account.PersonEmail, PersonBirthdate = account.PersonBirthdate, Sex__c = account.Sex__c, SSN__c = account.SSN__c, Employer__c = account.Employer__c));
                    account.AdvancedMD_Sync_Status__c = 'Synced';
                    account.AdvancedMD_Sync_Error__c = '';
                }
                else{
                    account.AdvancedMD_Sync_Status__c = 'Error';
                    account.AdvancedMD_Sync_Error__c = String.isNotBlank(response.getBody()) ? (response.getBody().contains('<Error>') ? response.getBody().substringBetween('<description>','</description>') : response.getBody().left(255)) : 'Status Code: ' + String.valueOf(response.getStatusCode());
                }
            }
            else{
                xmlBody = '<ppmdmsg action="updatepatient" class="api" force="1">'
                            	+'<patientlist>'
                            		+'<patient id="' + ApexUtil.getAMDID(account.AdvancedMDID__c , org) + '" name="' + account.LastName + (String.isNotBlank(account.FirstName) ? ',' + account.FirstName : '') + (String.isNotBlank(account.MiddleName) ? ' ' + account.MiddleName : '') + '"'+ (String.isNotBlank(account.Provider__r.Profile_Id__c) ? ' profile="' + account.Provider__r.Profile_Id__c + '"' : '') + /*(String.isNotBlank(account.Responsible_Party__r.AdvancedMD_Resp_Party_ID__c) ? ' respparty="' +ApexUtil.getAMDID(account.Responsible_Party__r.AdvancedMD_Resp_Party_ID__c, org)  + '"' : '') +*/ ' dob="' + (account.PersonBirthdate != null ? account.PersonBirthdate.format() : '') + '" deceased="' + (account.As_of_Date__c != null ? account.As_of_Date__c.format() : '') + '" inactivestatus="' + (account.As_of_Date__c != null ? '6' : '') + '" sex="' + (account.Sex__c == 'Male' ? 'M' : account.Sex__c == 'Female' ? 'F' : account.Sex__c == 'Unknown' ? 'U' : '') + '" ssn="' + (String.isNotBlank(account.SSN__c) ? account.SSN__c : '') + '" genderidentity="' + (account.GI__c == 'Male' ? '558' : account.GI__c == 'Female' ? '559' : account.GI__c == 'Transgender Male / Trans Man / Female-to-Male' ? '560' : account.GI__c == 'Transgender Female / Trans Wormen / Male-to-Female' ? '561' : account.GI__c == 'Genderqueer, Neither exclusively male nor female' ? '562' : account.GI__c == 'Decline to answer' ? '564' : '') + '" orientation="' + (account.SO__c == 'Straight / Heterosexual' ? '565' : account.SO__c == 'Lesbian / Gay / Homosexual' ? '566' : account.SO__c == 'Bisexual' ? '567' : account.SO__c == 'Something else' ? '568' : account.SO__c == 'Don\'t know' ? '569' : account.SO__c == 'Decline to answer' ? '570' : '') + '" chart="' + (String.isNotBlank(account.Chart_Number__c) ? account.Chart_Number__c : '') + '" maritalstatus="' + (String.isNotBlank(account.Marital_Status__c) ? (account.Marital_Status__c == 'Single' ? '1' : account.Marital_Status__c == 'Married' ? '2' : account.Marital_Status__c == 'Divorced' ? '3' : account.Marital_Status__c == 'Legally Separated' ? '4' : account.Marital_Status__c == 'Widowed' ? '5' : account.Marital_Status__c == 'Unknown' ? '6' : account.Marital_Status__c) : '') + '" employer="' + (account.Employer__c != null ? account.Employer__c : '') + '" title="' + (String.isNotBlank(account.PersonTitle) ? account.PersonTitle : '') + '" hipaarelationship="' + (String.isNotBlank(account.Relationship__c) ? (account.Relationship__c == '18-Self' ? '18' : account.Relationship__c == '01-Spouse' ? '01' : account.Relationship__c == '04-Grandfather or Grandmother' ? '04' : account.Relationship__c == '05-Grandson or Granddaughter' ? '05' : account.Relationship__c == '07-Nephew or Niece' ? '07' : account.Relationship__c == '09-Adopted Child' ? '09' : account.Relationship__c == '10-Foster Child' ? '10' : account.Relationship__c == '15-Ward' ? '15' : account.Relationship__c == '17-Stepson or Stepdaughter' ? '17' : account.Relationship__c == '19-Child' ? '19' : account.Relationship__c == '20-Employee' ? '20' : account.Relationship__c == '21-Unknown' ? '21' : account.Relationship__c == '22-Handicapped Dependent' ? '22' : account.Relationship__c == '23-Sponsored Dependent' ? '23' : account.Relationship__c == '24-Dependent of a Minor Dependent' ? '24' : account.Relationship__c == '29-Significant Other' ? '29' : account.Relationship__c == '32-Mother' ? '32' : account.Relationship__c == '33-Father' ? '33' : account.Relationship__c == '34-Other Adult' ? '34' : account.Relationship__c == '36-Emancipated Minor' ? '36' : account.Relationship__c == '39-Organ Donor' ? '39' : account.Relationship__c == '40-Cadaver Donor' ? '40' : account.Relationship__c == '41-Injured Plaintiff' ? '41' : account.Relationship__c == '43-Child Where Insured Has No Financial Responsibility' ? '43' : account.Relationship__c == '53-Life Partner' ? '53' : account.Relationship__c == 'G8-Other Relationship' ? 'G8' : account.Relationship__c) : '') + '" languageid="' + (String.isNotEmpty(account.Preferred_Language__c) ? account.Preferred_Language__c : '') + '" races="' + (String.isNotEmpty(account.Race__c) ? account.Race__c : '') + '" ethnicityid="' + (String.isNotEmpty(account.Ethnicity__c) ? account.Ethnicity__c : '') + '" additionalmrn="' + (String.isNotEmpty(account.Additional_MRN__c) ? account.Additional_MRN__c : '') + '">'
                            			+'<address address1="' + (String.isNotBlank(account.BillingStreet) ? account.BillingStreet.substringBefore(',') : '') + '" address2="' + (String.isNotBlank(account.BillingStreet) ? account.BillingStreet.substringAfter(',') : '') + '" zip="' + (String.isNotBlank(account.BillingPostalCode) ? account.BillingPostalCode : '') + '" city="' + (String.isNotBlank(account.BillingCity) ? account.BillingCity : '') + '" state="' + (String.isNotBlank(account.BillingState) ? account.BillingState : '') + '" countrycode="' + (String.isNotBlank(account.BillingCountry) ? account.BillingCountry : '') + '"/>'
                            			+'<contactinfo email="' + (String.isNotBlank(account.PersonEmail) ? account.PersonEmail : '') + '" homephone="' + (String.isNotBlank(account.PersonHomePhone) ? account.PersonHomePhone : '') + '" officephone="' + (String.isNotBlank(account.Work_Phone__c) ? account.Work_Phone__c.replaceAll('\\D', '').left(10) : '') + '" officeext="' + (String.isNotBlank(account.Work_Phone__c) ? account.Work_Phone__c.replaceAll('\\D', '').left(10) : '') + '" othertype="' + (String.isNotBlank(account.PersonOtherphone) ? 'O' : String.isNotBlank(account.PersonMobilePhone) ? 'C' : String.isNotBlank(account.Fax) ? 'F' : '') + '" otherphone="' + (String.isNotBlank(account.PersonOtherphone) ? account.PersonOtherphone : String.isNotBlank(account.PersonMobilePhone) ? account.PersonMobilePhone : String.isNotBlank(account.Fax) ? account.Fax : '') + '" preferredcommunicationfid="' + (String.isNotBlank(account.Phone) ? (account.Phone == account.PersonHomePhone ? '1' : account.Phone == account.Work_Phone__c ? '2' : account.Phone == account.PersonOtherphone ? '3' : '') : '') + '" confidentialcommunicationfid="' + (String.isNotBlank(account.Confidential__c) ? (account.Confidential__c == 'Home Phone' ? '1' : account.Confidential__c == 'Work Phone' ? '2' : account.Confidential__c == 'Email' ? '4' : account.Confidential__c == 'Letter' ? '5' : account.Confidential__c == 'Other' ? '6' : account.Confidential__c == 'Patient Portal' ? '7' : account.Confidential__c == 'Fax' || account.Confidential__c == 'Cell' || account.Confidential__c == 'Other Phone' ? '3' : '') : '') + '" communicationnote="' + (String.isNotBlank(account.Description) ? account.Description : '') + '"/>'
                            		+'</patient>'
                            	+'</patientlist>'
                            +'</ppmdmsg>';
                response = AdvancedMDConnector.postAdvancedMDObject(org, xmlBody);
                if(response.getStatusCode() != 200 || (String.isNotBlank(response.getBody()) && response.getBody().contains('<Error>'))){
                    account.AdvancedMD_Sync_Status__c = 'Error';
                    account.AdvancedMD_Sync_Error__c = String.isNotBlank(response.getBody()) ? (response.getBody().contains('<Error>') ? response.getBody().substringBetween('<description>','</description>') : response.getBody().left(255)) : 'Status Code: ' + String.valueOf(response.getStatusCode());
                }
                else{
                    account.AdvancedMD_Sync_Status__c = 'Synced';
                    account.AdvancedMD_Sync_Error__c = '';
                }
            }
            System.debug('xmlBody: ' + xmlBody);
            account.AdvancedMD_To_Sync__c = false;
        }
        ApexUtil.isAdvancedMDAccountTriggerInvoked = true;
        List<Database.SaveResult> saveResults;
        /*if(!respPartyAccountsMap.values().isEmpty()){
            saveResults = Database.insert(respPartyAccountsMap.values(), false);
            for(Database.SaveResult saveResult:saveResults) if(!saveResult.isSuccess()) for(Database.Error saveError : saveResult.getErrors()) System.debug('AdvancedMDPostPatientsBatch - Responsible Party Account Upsert Error: ' + saveError.getMessage());
            for(Account account:scope) if(respPartyAccountsMap.get(account.Responsible_Party_Id__c) != null) account.Responsible_Party__c = respPartyAccountsMap.get(account.Responsible_Party_Id__c).id;
        }*/
        saveResults = Database.update(scope, false);
        for(Database.SaveResult saveResult:saveResults) if(!saveResult.isSuccess()) for(Database.Error saveError : saveResult.getErrors()) System.debug('AdvancedMDPostPatientsBatch - Account update Error: ' + saveError.getMessage());
        //if(AdvancedMDConnector.authentication.Token_Datetime__c == null || (DateTime.now() >= AdvancedMDConnector.authentication.Token_Datetime__c.addHours(24).addMinutes(-1))){AdvancedMDConnector.authentication.Token_Datetime__c = Datetime.now();update AdvancedMDConnector.authentication;}
    }
    global void finish(Database.BatchableContext BC){
        System.debug('Finish Post');
        if(!Test.isRunningTest())  Database.executeBatch(new AdvancedMDPostVisitsBatch(org));   
    }
}